#!/usr/bin/env python3
# =============================================================================
# @file    query-server
# @brief   Ask DIBS for info
# @created 2021-04-07
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/dibs
# =============================================================================

from   datetime import datetime as dt
import os
from   os.path import dirname, join, isabs, exists, abspath
from   peewee import *
import plac
from   rich import box
from   rich.console import Console
from   rich.padding import Padding
from   rich.table import Table
import sys
from   sys import exit

sys.path.append(join(dirname(abspath(__file__)), '..'))

from   dibs.data_models import Item, Loan, History, Person
from   dibs.date_utils import human_datetime, time_now
from   dibs.roles import role_to_redirect, has_role, staff_user
from   dibs.settings import config, dibs_path


# Globals.
# .............................................................................

db_file = config('DATABASE_FILE')
db_path = dibs_path(db_file, must_exist = True)
if not db_path:
    print(f'‼️  Cannot find DIBS database {db_file or "-- not configured"}')
    exit(1)
database = SqliteDatabase(db_path)

_DATETIME_FORMAT = '%m/%d %I:%M %p'


# Main entry point.
# .............................................................................

@plac.annotations(
    list_loans = ('list the current loans',      'flag', 'l'),
    version    = ('print version info and exit', 'flag', 'V'),
)

def main(list_loans = False, version = False):
    '''Query the DIBS database and print contents.'''

    if version:
        print_version()
        exit(0)

    if list_loans:
        expire_loans()
        active = list(Loan.select().where(Loan.state == 'active'))
        recent = list(Loan.select().where(Loan.state == 'recent'))
        total = len(active) + len(recent)
        now = dt.utcnow().replace(microsecond = 0)

        console = Console()
        console.print(Padding(f'Current time: {human_datetime(now)}', (1, 0, 0, 1)))
        console.print(Padding(f'Total loans:  {total}', (0, 0, 0, 1)))
        if active:
            console.print(loans_table('active', active, 'bold red'))
        if recent:
            console.print(loans_table('recent', recent, 'bold white'))


# Miscellaneous utilities.
# .............................................................................

def expire_loans():
    now = time_now()
    # Delete expired loan recency records.
    for loan in Loan.select().where(Loan.state == 'recent', now >= Loan.reloan_time):
        with database.atomic():
            loan.delete_instance()


def loans_table(category, loans, color):
    table = Table(title = f'[{color}]{category.title()}[/] loans: [{color}]{len(loans)}[/]',
                  pad_edge = False, box = box.MINIMAL_DOUBLE_HEAD)
    table.add_column('Barcode', style = 'sky_blue2', width = 14)
    table.add_column('Title',   style = 'medium_turquoise', width = 22)
    table.add_column('Start')
    table.add_column('End',     style = 'light_cyan3')
    table.add_column('User')
    for loan in loans:
        table.add_row(loan.item.barcode,
                      loan.item.title,
                      human_datetime(loan.start_time, format = _DATETIME_FORMAT),
                      human_datetime(loan.end_time, format = _DATETIME_FORMAT),
                      loan.user)
    return table


# Main invocation.
# .............................................................................

if __name__ == '__main__':
    if len(sys.argv) == 1 or (len(sys.argv) > 1 and sys.argv[1] == 'help'):
        plac.call(main, ['-h'])
    else:
        plac.call(main)
